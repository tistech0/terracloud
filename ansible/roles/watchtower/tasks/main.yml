---
# Installation
- name: Setup Dependencies
  block:
    - name: Remove conflicting packages
      apt:
        name:
          - containerd
          - docker.io
          - docker-engine
        state: absent
        autoremove: yes
      ignore_errors: yes

    - name: Install required packages for Docker repository
      apt:
        name:
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
        state: present
        update_cache: yes

    - name: Add Docker official GPG key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker repository
      apt_repository:
        repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
        state: present
        filename: docker

    - name: Install Docker and dependencies
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - python3-pip
        state: present
        update_cache: yes

    - name: Install Python packages
      pip:
        name: "{{ dependencies.pip }}"
        state: present
        executable: pip3
  tags:
    - watchtower_install

- name: Setup Docker Network
  block:
    - name: Create Docker network
      docker_network:
        name: "{{ docker_network }}"
        state: present
  tags:
    - watchtower_network

# Configuration
- name: Configure Watchtower
  block:
    - name: Create Watchtower configuration directory
      file:
        path: "{{ watchtower_config_dir }}"
        state: directory
        mode: '0755'

    - name: Create Watchtower configuration
      template:
        src: watchtower_config.json.j2
        dest: "{{ watchtower_config_dir }}/config.json"
        mode: '0644'
      notify: Restart Watchtower

    - name: Configure UFW rules
      ufw:
        rule: allow
        port: "{{ item.port }}"
        proto: "{{ item.proto }}"
        from_ip: "{{ item.from_ip | default(omit) }}"
      loop: "{{ watchtower_ufw_rules }}"
  tags:
    - watchtower_config

- name: Configure Prometheus Monitoring
  block:
    - name: Create Prometheus configuration directory
      file:
        path: "{{ prometheus_config_path | default('/etc/prometheus/conf.d') }}"
        state: directory
        mode: '0755'
      when: 
        - enable_monitoring | default(false)
        - inventory_hostname in groups['monitoring_hosts']

    - name: Configure Prometheus metrics scraping
      template:
        src: prometheus_metrics.yml.j2
        dest: "{{ prometheus_config_path | default('/etc/prometheus/conf.d') }}/watchtower.yml"
        mode: '0644'
      when: 
        - enable_monitoring | default(false)
        - inventory_hostname in groups['monitoring_hosts']
      notify: Reload Prometheus
  tags:
    - watchtower_monitoring

# Container configuration
- name: Start Watchtower container
  docker_container:
    name: "{{ watchtower_container_name }}"
    image: "{{ watchtower_image }}"
    state: started
    restart_policy: always
    volumes:
      - "{{ docker_socket }}:/var/run/docker.sock"
      - "{{ watchtower_config_dir }}:/config"
    env:
      WATCHTOWER_CLEANUP: "{{ watchtower_cleanup | string | lower | string }}"
      WATCHTOWER_DEBUG: "{{ (watchtower_log_level == 'debug') | string | lower | string }}"
    ports:
      - "{{ watchtower_metrics_port }}:8080"
    network_mode: bridge
    log_driver: json-file
    log_options:
      max-size: "10m"
      max-file: "3"

- name: Start application container
  docker_container:
    name: "{{ app_container_name }}"
    image: "{{ watched_repo }}"
    state: started
    restart_policy: always
    ports:
      - "{{ app_container_port }}:80"
    network_mode: bridge

# Monitoring
- name: Verify Deployment
  block:
    - name: Wait for Watchtower metrics
      uri:
        url: "http://localhost:{{ watchtower_metrics_port }}/metrics"
        method: GET
        status_code: 200
      register: metrics_check
      until: metrics_check.status == 200
      retries: 6
      delay: 10
      ignore_errors: yes

    - name: Check Watchtower logs
      command: docker logs {{ watchtower_container_name }}
      register: watchtower_logs
      changed_when: false
      
    - name: Display Watchtower status
      debug:
        msg: 
          - "Watchtower Status: {{ 'Running' if metrics_check.status == 200 else 'Failed' }}"
          - "Recent logs:"
          - "{{ watchtower_logs.stdout_lines | default([]) }}"
  tags:
    - watchtower_verify